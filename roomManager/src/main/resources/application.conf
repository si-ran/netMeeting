


app {

  projectVersion = "20191101"

  server {
    protocol = "http"
    host = "10.1.29.250:30395"
    port = 30395
    InternalToken = "aklj345lkjOIu345olnmadf"
  }

  http {
    interface = "0.0.0.0"
    port = 30395
  }

}

dependence{

  rtmpUrlHeader = "rtmp://10.1.29.247/live/"

}


slick.db {
  url = "jdbc:h2:file:../DATA/bubble;AUTO_SERVER=TRUE"
  //  url = "jdbc:postgresql://192.168.0.250:5432/"
  #localUrl = "jdbc:mysql://localhost:3306/mpAuthServer?characterEncoding=utf-8&rewriteBatchedStatements=true"
  user = "bubble"
  password = "bubble"
  maximumPoolSize = 10
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}

session {
  cookie {
    name = "NetMeetingSession"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "12i8:ooasudbn!#@$#%^&%befE%^@$TGFWR$@Gs29f6g2h3fdv2daq29migmd;!:1"
}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {


    warn-about-java-serializer-usage = false

    default-dispatcher {

      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        # parallelism-factor = 3.0
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 4

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }


  http {

    server {

      remote-address-header = on

      parsing {

        max-content-length = 100m
        max-chunk-ext-length = 256
        max-chunk-size = 2m

      }
    }
  }


//  persistence {
//
//    journal {
//
//      plugin = "akka.persistence.journal.leveldb"
//
//      leveldb {
//        dir = "./akkaPersist/journal"
//        #dir = "/home/zhangtao/product/mpAuthor/akkaPersist/journal"
//
//        #off for sbt test run, on for produce.
//        native = off
//      }
//    }
//
//    snapshot-store {
//
//      plugin = "akka.persistence.snapshot-store.local"
//
//      local {
//        dir = "./akkaPersist/snapshot"
//        #dir = "/home/zhangtao/product/mpAuthor/akkaPersist/snapshot"
//      }
//    }
//  }

}


